<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>6.数据代理</title>
    <link href="/2021/11/20/7.%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/"/>
    <url>/2021/11/20/7.%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Object-defineProperty方法"><a href="#1-Object-defineProperty方法" class="headerlink" title="1.Object.defineProperty方法"></a>1.Object.defineProperty方法</h1><p>在JS中，Object.defineProperty方法会在一个对象中添加一个新的属性，比如一下代码</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">let</span> person = </span></span><span class="xquery">&#123;</span><br><span class="xquery">           <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="xquery">            sex: <span class="hljs-string">&#x27;male&#x27;</span>,</span><br><span class="xquery">        &#125;</span><span class="xml"><span class="javascript"></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">//传递三个参数，第一个参数是需要定义属性的对象，第二个是需要定义的属性名称，第三个是属性表述</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-built_in">Object</span>.defineProperty(person, <span class="hljs-string">&#x27;age&#x27;</span>,</span></span><span class="xquery">&#123;</span><br><span class="xquery">            value:<span class="hljs-number">18</span></span><br><span class="xquery">        &#125;</span><span class="xml"><span class="javascript">)</span></span><br><span class="javascript"><span class="xml">        </span></span><br><span class="javascript"><span class="xml">        <span class="hljs-built_in">console</span>.log(person)</span></span><br><span class="javascript"><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在这一段代码中，原本的person对象并没有age属性，但是通过Object.defineProperty，使得person拥有了age属性。<br><br>具体语法如下：<br><br>Object.defineProperty(obj, prop, descriptor)<a href="https://www.jianshu.com/p/8fe1382ba135">详情</a><br><br><code>obj</code>要定义属性的对象。<br><br><code>prop</code>要定义或修改的属性的名称或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol"><code>Symbol</code></a> 。<br><br><code>descriptor</code>要定义或修改的属性描述符。<br><img src="assets/Object.defineProperty.png" alt="图片"><br></p><h2 id="相比直接在对象中定义的区别"><a href="#相比直接在对象中定义的区别" class="headerlink" title="相比直接在对象中定义的区别"></a>相比直接在对象中定义的区别</h2><h3 id="1-枚举"><a href="#1-枚举" class="headerlink" title="1.枚举"></a>1.枚举</h3><p>相比于直接在person中写</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">let</span> person = </span></span><span class="xquery">&#123;</span><br><span class="xquery">           <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="xquery">            sex: <span class="hljs-string">&#x27;male&#x27;</span>,</span><br><span class="xquery">            age: <span class="hljs-number">18</span></span><br><span class="xquery">        &#125;</span><span class="xml"></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>使用Object.defineProperty方法定义新属性的时候是无法被枚举的（如使用console.log(Object.keys( )，此方法传入一个对象作为参数并把传入对象的所有属性的属性名提取出来做成一个数组 ）。<br><br>如果想要使定义的新属性可以枚举，则需要在person部分添加enumerable</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">Object</span>.defineProperty(person, <span class="hljs-string">&#x27;age&#x27;</span>,&#123;<br>  value:<span class="hljs-number">18</span>,<br>  enumerable:<span class="hljs-literal">true</span>,<span class="hljs-regexp">//</span>控制属性是否可枚举，默认值为<span class="hljs-literal">false</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h3><p>如果使用一下方法</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">let</span> person = </span></span><span class="xquery">&#123;</span><br><span class="xquery">           <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="xquery">            sex: <span class="hljs-string">&#x27;male&#x27;</span>,</span><br><span class="xquery">            age: <span class="hljs-number">18</span></span><br><span class="xquery">        &#125;</span><span class="xml"></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>直接在console中输入person.age=19，然后再输入person查看person对象，会发现原先的age已经变成了19，但是如果用Object.defineProperty定义的新属性age，则无法使用这种方法更高，想要可以更改age，需要加入writable: true</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">Object.defineProperty(person, <span class="hljs-string">&#x27;age&#x27;</span>,&#123;<br>  <span class="hljs-symbol">value:</span><span class="hljs-number">18</span>,<br>  <span class="hljs-symbol">enumerable:</span><span class="hljs-keyword">true</span>,<span class="hljs-regexp">//</span>控制属性是否可枚举，默认值为<span class="hljs-keyword">false</span><br>  <span class="hljs-symbol">writable:</span> <span class="hljs-keyword">true</span>,<span class="hljs-regexp">//</span>控制属性是否可修改，默认值为<span class="hljs-keyword">false</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="3-删除对象中属性"><a href="#3-删除对象中属性" class="headerlink" title="3.删除对象中属性"></a>3.删除对象中属性</h3><p>使用Object.defineProperty定义新属性age时，无法使用delete person.age删除，如需删除则需要使用configurable</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir">Object.defineProperty(person, <span class="hljs-string">&#x27;age&#x27;</span>,&#123;<br>  <span class="hljs-symbol">value:</span><span class="hljs-number">18</span>,<br>  <span class="hljs-symbol">enumerable:</span><span class="hljs-keyword">true</span>,<span class="hljs-regexp">//</span>控制属性是否可枚举，默认值为<span class="hljs-keyword">false</span><br>  <span class="hljs-symbol">writable:</span> <span class="hljs-keyword">true</span>,<span class="hljs-regexp">//</span>控制属性是否可修改，默认值为<span class="hljs-keyword">false</span><br>  <span class="hljs-symbol">configurable:</span><span class="hljs-keyword">true</span>,<span class="hljs-regexp">//</span>控制属性是否可删除，默认值为<span class="hljs-keyword">false</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="4-其他配置项"><a href="#4-其他配置项" class="headerlink" title="4.其他配置项"></a>4.其他配置项</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> num = <span class="hljs-number">18</span>;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> person = &#123;</span><br><span class="javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>,</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//传递三个参数，第一个参数是要传递属性的对象，第二个是要添加的属性名称，第三个是配置</span></span><br><span class="javascript">        <span class="hljs-built_in">Object</span>.defineProperty(person, <span class="hljs-string">&#x27;age&#x27;</span>,&#123;</span><br><span class="javascript">            <span class="hljs-comment">//当读取person的age属性时，会调用get函数（getter）,且返回值就是age的值</span></span><br><span class="javascript">            <span class="hljs-attr">get</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> num;</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-comment">//当有人修改person的age属性时，会调用set函数（setter），且收到修改的具体值</span></span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;修改了age属性且值是：&#x27;</span>,value);</span><br><span class="javascript">                num = value;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样，无论使用num = XX的方式还是person.age = XX，都可以正常的修改num以及property中的age。</p><h1 id="2-数据代理"><a href="#2-数据代理" class="headerlink" title="2.数据代理"></a>2.数据代理</h1><p>在原生的JS中，如果想要通过一个对象去访问另一个对象中的属性，同样可以借助Object.defineProperty。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据代理：通过一个对象代理对另一个对象的操作（读/写） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">let</span> obj1 = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">100</span>&#125;;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> obj2 = &#123;<span class="hljs-attr">y</span>:<span class="hljs-number">200</span>&#125;;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-built_in">Object</span>.defineProperty(obj2, <span class="hljs-string">&#x27;x&#x27;</span>, &#123;</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> obj1.x;</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span>&#123;</span><br><span class="javascript">                obj1.x = value;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="3-Vue中的数据代理"><a href="#3-Vue中的数据代理" class="headerlink" title="3.Vue中的数据代理"></a>3.Vue中的数据代理</h1><p>新建一个Vue容器以及一个叫vm的Vue实例对象，至于为什么要叫vm，因为vue实例对象是ViewModel。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;root&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Hello </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">message1</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Hello </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">message2</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">message1</span>: <span class="hljs-string">&#x27;World!&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">message2</span>: <span class="hljs-string">&#x27;Vue.js!&#x27;</span></span></span><br><span class="javascript"><span class="xml">            &#125;</span></span><br><span class="javascript"><span class="xml">        &#125;);</span></span><br><span class="javascript"><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在浏览器的console中，输入 vm ，可以看到Vue实例对象中的数据。其中在message1和message2处，和上文中Object.defineProperty( )方法相似，都是：(…)，将鼠标括号时，会显示invoke property getter（调用属性getter），<strong>也就是说实例vm的属性是Object.defineProperty( )添加的</strong>，可见Vue是借助getter和setter实现了数据绑定。当通过实例vm读取他的属性时，触发了vm中属性的getter方法的调用，随后getter并且把data中的数据传递；同理当通过实例vm修改他的属性时，触发属性setter方法调用然后setter将data中的数据修改；vm会执行vm._data = options.data（在创建Vue实例对象的时候传递的不是一个单独的data，而是配置对象，这个配置对象称之为options），把data中的数据传入到vm自身的data（通过数据劫持）。 <br><br>在验证上述的内容之前，先修改一下代码</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;root&#x27;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Hello </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">message1</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Hello </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">message2</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">let</span> data = &#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">message1</span>: <span class="hljs-string">&#x27;World!&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">message2</span>: <span class="hljs-string">&#x27;Vue!&#x27;</span></span></span><br><span class="javascript"><span class="xml">        &#125;;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">data</span>: data  <span class="hljs-comment">//可以简写省略号及其后面的data</span></span></span><br><span class="javascript"><span class="xml">        &#125;);</span></span><br><span class="javascript"><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>因为vm会执行vm._data = options.data，而options.data的值由来源于Vue实例外部定义的data（即let data那一段代码），所以vm._data = options.data = data，这样只要在console输入vm._data = data，如果结果是true，就说明vm._data = options.data = data是成立的。<br></p><p>验证getter只需要在VS Code中直接修改HTML文件中data中的属性，然后在console输入vm.PropertyName观察console的输出是否和HTML文件里data中属性的值一样即可，但是验证setter由于无法在代码中验证（显然我们无法通过观察VS Code中HTML文件的data中的属性去判断），但是由于vm._data = options.data = data，所以可以通过输入vm._data.message1 = ‘WORLD!’然后观察vm._data.message1的值是否变成WORLD!即可。<br></p><p>以这节写的代码为例，在创建vm实例对象后，Vue开始为实例对象准备了很多的属性和方法，其中就包括了_data，_data中的数据直接来源于data；<strong>然后Vue会把_data中的属性message1和message2属性放到实例对象vm，message1和message2的值来源于通过getter读取_data中的message1和message2；修改时，vm的message1和message2通过setter映射到_data去修改。</strong>这就是Vue中的数据代理，把data的数据放到vm，否则写代码时每次都要写（vm身上和Vue原型对象上所有的属性和方法在模版中都可以直接使用）。</p><h1 id="4-Vue数据代理小结"><a href="#4-Vue数据代理小结" class="headerlink" title="4.Vue数据代理小结"></a>4.Vue数据代理小结</h1><p>1.Vue中的数据代理：通过vm对象来代理data对象中属性的操作（读/写）。<br><br>2.Vue数据代理的好处：更方便的操作data中的数据。<br><br>3.基本原理：通过Object.defineProperty( )把data对象中所有属性添加到vm上；为每一个添加到vm上的属性指定一个getter和setter；在getter/setter内部操作（读/写）data中对应的属性。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6.MVVM</title>
    <link href="/2021/11/02/6-MVVM/"/>
    <url>/2021/11/02/6-MVVM/</url>
    
    <content type="html"><![CDATA[<h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><p>M：模型（Model），对应data中的数据<br><br>V：视图（View）模版<br><br>VM：视图模型（View Model），Vue实例对象<br></p><img src="/2021/11/02/6-MVVM/Vue-MVVM.jpeg" class="">]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Bolg避坑指南</title>
    <link href="/2021/11/02/Hexo%E5%8D%9A%E5%AE%A2%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    <url>/2021/11/02/Hexo%E5%8D%9A%E5%AE%A2%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Bolg避坑指南"><a href="#Hexo-Bolg避坑指南" class="headerlink" title="Hexo Bolg避坑指南"></a>Hexo Bolg避坑指南</h1><p>这一次搭建Hexo服务器，把能踩的坑全都踩了，故写一篇避坑指南。</p><h2 id="1-在SSH模式运行Hexo-d指令之后Permission-Denied"><a href="#1-在SSH模式运行Hexo-d指令之后Permission-Denied" class="headerlink" title="1.在SSH模式运行Hexo d指令之后Permission Denied"></a>1.在SSH模式运行Hexo d指令之后Permission Denied</h2><h3 id="1-1生成SSH-keys"><a href="#1-1生成SSH-keys" class="headerlink" title="1.1生成SSH keys"></a>1.1生成SSH keys</h3><p>出现此情况是因为没有设置GitHub的密钥，首先，在terminal中输入以下代码：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;your-email&quot;</span><br></code></pre></td></tr></table></figure><p>把上面指令的your email替换成你自己的email地址，然后系统会提示你创建密码，这个密码是提交项目时使用的，如果你不想每次提交时都输入密码则可以按两次回车不设置密码。</p><h3 id="1-2将获得的密钥添加到GitHub中"><a href="#1-2将获得的密钥添加到GitHub中" class="headerlink" title="1.2将获得的密钥添加到GitHub中"></a>1.2将获得的密钥添加到GitHub中</h3><p>然后，在finder中按shift+command+G，把id_rsa.pub中的内容全都复制到GitHub的settings选项SSH keys中new SSH key中。<br></p><h3 id="1-3测试"><a href="#1-3测试" class="headerlink" title="1.3测试"></a>1.3测试</h3><p>输入以下指令：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh -T <span class="hljs-symbol">git@</span>github.com<br></code></pre></td></tr></table></figure><p>得到以下反馈：</p><blockquote><p>The authenticity of host ‘github.com (XXX.XX.XXX)’ can’t be established.<br><br>RSA key fingerprint is XXXXXX.<br>Are you sure you want to continue connecting (yes/no)?</p></blockquote><p>输入yes，就可以看到：</p><blockquote><p>Hi your-username! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><h2 id="2-配置Git信息"><a href="#2-配置Git信息" class="headerlink" title="2.配置Git信息"></a>2.配置Git信息</h2><p>在终端中依次输入这两条指令：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.name &quot;your-username&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.email &quot;your-email&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-配置-config-yanl"><a href="#3-配置-config-yanl" class="headerlink" title="3.配置_config.yanl"></a>3.配置_config.yanl</h3><p>找到此文件以下部分代码，注意，yaml的语法要求每个同一层次的：后面必须有一个空格</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:your-username/your-username.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><h2 id="2-找不到仓库或者上传后页面长时间404"><a href="#2-找不到仓库或者上传后页面长时间404" class="headerlink" title="2.找不到仓库或者上传后页面长时间404"></a>2.找不到仓库或者上传后页面长时间404</h2><p>请检查你的仓库名称设置，比如有一个人的GitHub账户名称为AbcDe，在创建仓库时必须命名为abcde.github.io，<strong>用户名要相同而且大写英文字母要变成小写</strong></p><h2 id="3-经过重启等操作后，原先可以部署的Hexo-d指令突然无法使用"><a href="#3-经过重启等操作后，原先可以部署的Hexo-d指令突然无法使用" class="headerlink" title="3.经过重启等操作后，原先可以部署的Hexo d指令突然无法使用"></a>3.经过重启等操作后，原先可以部署的Hexo d指令突然无法使用</h2><p>这种情况有三种解决方法</p><h3 id="3-1将SSH连接改成HTTPS"><a href="#3-1将SSH连接改成HTTPS" class="headerlink" title="3.1将SSH连接改成HTTPS"></a>3.1将SSH连接改成HTTPS</h3><p>在_config.yaml文件中，找到repo这一行：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">repo: git@github<span class="hljs-selector-class">.com</span>:your-username/your-username<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span>.git<br></code></pre></td></tr></table></figure><p>换成<a href="https://github.com//your-username/your-username.github.io.git">https://github.com//your-username/your-username.github.io.git</a><br><br>然后博客文件夹下在终端中输入:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">rm -rf <span class="hljs-string">.deploy_git</span><br></code></pre></td></tr></table></figure><p>然后重新执行:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Hexo clean</span><br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Hexo g</span><br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Hexo d</span><br></code></pre></td></tr></table></figure><h3 id="3-2使用git窗口进行部署"><a href="#3-2使用git窗口进行部署" class="headerlink" title="3.2使用git窗口进行部署"></a>3.2使用git窗口进行部署</h3><p>在Finder访达中搜索终端，然后找到Git Bash，然后输入Hexo d。</p><h3 id="3-3不使用sudo指令的情况下进行发布"><a href="#3-3不使用sudo指令的情况下进行发布" class="headerlink" title="3.3不使用sudo指令的情况下进行发布"></a>3.3不使用sudo指令的情况下进行发布</h3><p>首先在Terminal中博客文件夹下以root模式输入：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">rm -rf <span class="hljs-string">.deploy_git</span>  <span class="hljs-string">//</span>注意，如果出现了这种情况，那么删除<span class="hljs-keyword">deploy</span>_git是必须的，而不是退出就行<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Hexo clean</span><br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Hexo g</span><br></code></pre></td></tr></table></figure><p>然后输入exit退出root模式，执行Hexo d指令。</p><h2 id="加入图片的正确姿势"><a href="#加入图片的正确姿势" class="headerlink" title="加入图片的正确姿势"></a>加入图片的正确姿势</h2><p>在在管理员模式下（进入Terminal sudo su）使用以下指令时，会生成一个与post-name同名的文件夹，里面可以放入图片资源</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">hexo n post-<span class="hljs-built_in">name</span><br></code></pre></td></tr></table></figure><p>然后，去config.yanl文件中中，把post_asset_folder选项改成true，然后，使用一下指令来插入，注意这部分代码仅需要更改your-picture-name.xxx为你想插入的图片的文件名和其格式</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">asset_img</span> your-picture-name.xxx %&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Blog搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog搭建</tag>
      
      <tag>Hexo blog</tag>
      
      <tag>避坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.Vue初步入门</title>
    <link href="/2021/11/02/2.Vue%E5%88%9D%E6%AD%A5%E5%85%A5%E9%97%A8/"/>
    <url>/2021/11/02/2.Vue%E5%88%9D%E6%AD%A5%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue初步入门"><a href="#Vue初步入门" class="headerlink" title="Vue初步入门"></a>Vue初步入门</h1><p>首先我们用 VS Code 输如 ! 在上文新建的 HTML 文件中生成一个模版，然后新建一个模版。制作好模版后，引入刚才放在文件夹的 Vue 文件，注意，Vue 和 Vue.min 都是 Vue 框架，只不过 Vue.min 删除了如错误提示等代码，更为简洁更适合生产环境而非开发环境。<br><br>首先需要引入Vue框架：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../VueJS/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>👆 以上的代码代表加入 Vue。<br><br>在使用 Vue 前，首先我们要创建一个容器，然后在容器中添加 Vue 模版：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name1</span>&#125;&#125;</span><span class="xml">!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">     Hello </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name2</span>&#125;&#125;</span><span class="xml">!</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>创建模版后在body中创建 Vue 实例，传入root配置对象，一个 Vue 实例对应一个容器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,  <span class="hljs-comment">//指定当前Vue容器,值通常为CSS选择器字符串，这里使用了id选择器的写法，也可以用class选择器</span></span><br><span class="javascript">    <span class="hljs-attr">data</span>:&#123;  <span class="hljs-comment">//data中用于存储数据，数据供el指定的容器使用</span></span><br><span class="javascript">    <span class="hljs-attr">name1</span>:<span class="hljs-string">&#x27;World&#x27;</span>,</span><br><span class="javascript">    <span class="hljs-attr">name2</span>:<span class="hljs-string">&#x27;Vue&#x27;</span>&#125;</span><br><span class="javascript">  &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意，Vue容器中写的“”中“XXX”需要写成js表达式，且XXX可以自动读取到data中所有属性，如果data中数据改变，模版中用到此数据的地方也会发生改变。<br><br>一个Vue实例只能对应一个容器，在真实的开发中，只有一个Vue实例，并且会配合组件一起使用。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5.el和data的两种写法</title>
    <link href="/2021/11/02/5.el%E5%92%8Cdata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/"/>
    <url>/2021/11/02/5.el%E5%92%8Cdata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="el和data的两种写法"><a href="#el和data的两种写法" class="headerlink" title="el和data的两种写法"></a>el和data的两种写法</h1><h2 id="1-el的两种写法"><a href="#1-el的两种写法" class="headerlink" title="1.el的两种写法"></a>1.el的两种写法</h2><p>先创建一个容器</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;root&#x27;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Hello </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在之前的例子中，创建Vue实例一般是如下写法</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-keyword">e</span><span class="hljs-variable">l:</span><span class="hljs-string">&#x27;#root&#x27;</span>,<br>  dat<span class="hljs-variable">a:</span> &#123;<br>    name:<span class="hljs-string">&#x27;World&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>还有一种其他的写法</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lasso">const v1 = <span class="hljs-literal">new</span> Vue(&#123;<br>  <span class="hljs-built_in">data</span>: &#123;<br>    name:<span class="hljs-string">&#x27;World&#x27;</span><br>  &#125;<br>&#125;)<br>console.<span class="hljs-keyword">log</span>(v1)<br>v.$mount(<span class="hljs-string">&#x27;#root&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这两种写法都是可以的，只不过第二种写法更为灵活，比如写一个定时器</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const v1 = <span class="hljs-keyword">new</span> Vue(&#123;<br>  data: &#123;<br>    name:<span class="hljs-string">&#x27;World&#x27;</span><br>  &#125;<br>&#125;)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  v.$mount(<span class="hljs-string">&#x27;root)</span><br><span class="hljs-string">&#125;,5000);</span><br></code></pre></td></tr></table></figure><p>mount有挂载的意思，正如上面的代码所做的一样，把容器中的模版交给Vue实例，进行解析，解析之后，再把解析后的内容重新挂载到页面的指定位置上。</p><h2 id="2-data的两种写法"><a href="#2-data的两种写法" class="headerlink" title="2.data的两种写法"></a>2.data的两种写法</h2><p>依旧是创建一个容器</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;root&#x27;</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Hello </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>如同el的两种写法一样，data也有两种写法，之前的例子一直这么写，也就是对象式写法</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-keyword">e</span><span class="hljs-variable">l:</span><span class="hljs-string">&#x27;#root&#x27;</span>,<br>  dat<span class="hljs-variable">a:</span> &#123;<br>    name:<span class="hljs-string">&#x27;World&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>实际上还有函数式写法</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">new</span> Vue(&#123;<br>  el:<span class="hljs-string">&#x27;#root&#x27;</span>,<br>  data:<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span>&#123;<br>      name:<span class="hljs-string">&#x27;World&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用函数式写法，data必须要返回一个对象，对象里面的数据是当前需要的数据，在这个例子中，需要的是name，所以需要返回name。在使用Vue组件时，必需要使用函数式。<br><br>在函数式写法中，data的值是一个函数，这个函数是Vue调用的，如果想看这个函数的this，可以在return上面加上console.log(this)来观察，会发现此处的this是Vue实例对象。<br><br>注意，由Vue管理的函数的时候必须用普通形式function，如果用( )=&gt;，因为箭头函数没有this、arguments、super或new.target，所以这里会向外寻找，此时的实例将不再是Vue实例而是window。<br><br>由于data:function()的写法较为复杂，所以会采用在对象中写方法会删掉冒号和function，变成如下形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span>&#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;World&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.Vue初步安装使用</title>
    <link href="/2021/11/02/Vue%E5%88%9D%E6%AD%A5%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/11/02/Vue%E5%88%9D%E6%AD%A5%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue初步安装使用"><a href="#Vue初步安装使用" class="headerlink" title="Vue初步安装使用"></a>Vue初步安装使用</h1><p>首先使用homebrew输入：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">brew install <span class="hljs-keyword">node</span><span class="hljs-title"></span><br></code></pre></td></tr></table></figure><p>然后使用brew安装npm：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>npm<br></code></pre></td></tr></table></figure><p>然后到<a href="https://cn.vuejs.org/index.html">Vue官网</a>下载vue.js和vue.min.js。在与HTML文件夹平行的文件夹创建名为Vue的文件夹，并将这两个文件放入其中：</p><img src="/2021/11/02/Vue%E5%88%9D%E6%AD%A5%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/IMG_1.png" class=""><p>然后在创建好的项目等HTML文件Head部分加入如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../VueJS/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在浏览器的Console中，可以看到如下部分：</p><img src="/2021/11/02/Vue%E5%88%9D%E6%AD%A5%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/IMG_2735.jpg" class=""><p>如果看到了这部分，至此，Vue环境搭建成功。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4.数据绑定</title>
    <link href="/2021/11/02/4.%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    <url>/2021/11/02/4.%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><p>通过v-bind绑定输入框里的值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../VueJS/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">Vue.config.devtools = <span class="hljs-literal">true</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>        单向数据绑定：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Hello World&#x27;</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上面的案例中把输入框的value值通过v-bind进行绑定，v-bind是一个单向数据绑定，当name变化时，通过v-bind使得input的value进行变化，但是修改input中的东西，比如修改为Hello Vue，在console的terminal中使用document.querySelector(‘input’).value查看可以发现现在的value值已经被修改成Hello Vue，但是在vue devtool查看发现name中的值并未改变，这就是由于v-bind只能单向绑定导致页面中的值无法去影响name中的数据，这是v-bind最大的特点。<br><br>如果你希望实现双向的数据绑定，需要使用v-model</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-symbol">&lt;body&gt;</span><br>    <br>    &lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br>        单向数据绑定：&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> :value=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;/<span class="hljs-built_in">input</span>&gt;<br>        <span class="hljs-symbol">&lt;br&gt;</span><br>        双向数据绑定：&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> v-<span class="hljs-keyword">mode</span><span class="hljs-variable">l:value</span>=<span class="hljs-string">&quot;name2&quot;</span>&gt;&lt;/<span class="hljs-built_in">input</span>&gt;<br>    &lt;/div&gt;<br><br>    <span class="hljs-symbol">&lt;script&gt;</span><br>        <span class="hljs-keyword">new</span> Vue(&#123;<br>            <span class="hljs-keyword">e</span><span class="hljs-variable">l:</span><span class="hljs-string">&#x27;#root&#x27;</span>,<br>            dat<span class="hljs-variable">a:</span> &#123;<br>                name:<span class="hljs-string">&#x27;Hello World&#x27;</span>,<br>                name2:<span class="hljs-string">&#x27;Hello Vue&#x27;</span><br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>注意，v-model不能用在所有的元素上，如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-model:x</span>=<span class="hljs-string">‘name’</span>&gt;</span>Hello<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><p>因为v-model只能用在表单元素（输入元素，如input，select等）。<br><br><br>总结：<br><br>1.使用v-bind数据只能从data流向页面<br><br>2.使用v-model数据不仅能从data流向页面，还可以从页面流向data<br><br>v-model:value可以简写为v-model，因为v-model默认收集的就是value值。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">双向数据绑定：&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;name2&quot;</span>&gt;&lt;/<span class="hljs-built_in">input</span>&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用CLI方式创建Vue+SpringBoot项目</title>
    <link href="/2021/11/01/%E4%BD%BF%E7%94%A8CLI%E5%88%9B%E5%BB%BAVue-SpringBoot%E9%A1%B9%E7%9B%AE/"/>
    <url>/2021/11/01/%E4%BD%BF%E7%94%A8CLI%E5%88%9B%E5%BB%BAVue-SpringBoot%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="使用CLI方式创建Vue-SpringBoot项目"><a href="#使用CLI方式创建Vue-SpringBoot项目" class="headerlink" title="使用CLI方式创建Vue+SpringBoot项目"></a>使用CLI方式创建Vue+SpringBoot项目</h1><p>首先使用npm安装Vue CLI，也就是所谓的脚手架。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install -g @vue/cli<br></code></pre></td></tr></table></figure><p>然后输入一下指令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">vue create YourProjectName</span><br></code></pre></td></tr></table></figure><p>然后，会进入Vue CLI的界面，通过上下方向键选择模版选项，如果手动配置(Manually select features)，进入后使用空格来选择是否使用,如果是初学者，把Choose Vue version,Babel,Router,Vuex都选上即可，后面的router输入y选择history mode，然后选择in package jason在Save this as a preset for future projects选择是否作为模版。<br><br><br>使用IntelliJ IDEA打开此工程，然后在Add Configurations点击加号，然后选择npm然后在scripts中加入serve，这样就可以快速启动项目（如果是VSCode，可以在Terminal输入npm serve来运行）。如果想运行后直接打开浏览器到相关页面，可以在package.json中的如下部分</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;  <br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;picshare&quot;</span>,  <br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.1.0&quot;</span>,  <br>  <span class="hljs-attr">&quot;private&quot;</span>: <span class="hljs-literal">true</span>,  <br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;  <br>  <span class="hljs-attr">&quot;serve&quot;</span>: <span class="hljs-string">&quot;vue-cli-service serve&quot;</span>,  <br>  <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;vue-cli-service build&quot;</span>  <br>&#125;<br></code></pre></td></tr></table></figure><p>改成</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;  <br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;picshare&quot;</span>,  <br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.1.0&quot;</span>,  <br>  <span class="hljs-attr">&quot;private&quot;</span>: <span class="hljs-literal">true</span>,  <br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;  <br>  <span class="hljs-attr">&quot;serve&quot;</span>: <span class="hljs-string">&quot;vue-cli-service serve --open&quot;</span>,  <br>  <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;vue-cli-service build&quot;</span>  <br>&#125;<br></code></pre></td></tr></table></figure><p>其他部分的不要改动。</p><h1 id="2-CLI文件结构说明"><a href="#2-CLI文件结构说明" class="headerlink" title="2.CLI文件结构说明"></a>2.CLI文件结构说明</h1><img src="/2021/11/01/%E4%BD%BF%E7%94%A8CLI%E5%88%9B%E5%BB%BAVue-SpringBoot%E9%A1%B9%E7%9B%AE/CLIFile.png" class=""><br>assets 是资源文件夹，通常我们会把图片资源放在里面。<br>components 文件夹通常会放一些组件。<br>router 文件夹里面放的是 VueRouter 的相关配置。<br>store 文件夹里面放的是 Vuex 的相关配置。<br>views 文件夹里面通常放置页面的 .vue 文件。<br>App.vue 定义了一个根组件。<br>main.js 是项目的入口文件。<br>public文件夹提供了界面，通过index.html把Vue文件编译并显示在界面上；router中的index.js把页面通过路径映射；stor中的index.js文件用来存储信息；Views存储了Home.vue和About.vue，Home.vue中引入了components文件夹中的HelloWorld.vue文件，可以把一些代码进行打包成vue文件通过其他方式引入；package.json定义项目依赖。<h1 id="3-改造工程"><a href="#3-改造工程" class="headerlink" title="3.改造工程"></a>3.改造工程</h1><h2 id="3-1将Home文件内容改为如下，去掉引入HelloWorld-vue的部分"><a href="#3-1将Home文件内容改为如下，去掉引入HelloWorld-vue的部分" class="headerlink" title="3.1将Home文件内容改为如下，去掉引入HelloWorld.vue的部分"></a>3.1将Home文件内容改为如下，去掉引入HelloWorld.vue的部分</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    </span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-comment">// @ is an alias to /src</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="xquery">&#123;</span><br><span class="xquery"> <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,</span><br><span class="xquery">  components: &#123;</span><br><span class="xquery">    </span><br><span class="xquery">  &#125;</span><span class="xml"></span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="3-2改造App-vue文件"><a href="#3-2改造App-vue文件" class="headerlink" title="3.2改造App.vue文件"></a>3.2改造App.vue文件</h2><p>如果想要更改当前页面显示的内容，需要在components文件夹创建一个组件，然后更改App.vue文件为如下</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">YourComponentName</span>/&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>/&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">import</span> Header <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/YourComponentName&quot;</span>;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="xquery">&#123;</span><br><span class="xquery">   <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;YourComponentName&#x27;</span>,</span><br><span class="xquery">    components:&#123;</span><br><span class="xquery">      YourComponentName</span><br><span class="xquery">    &#125;</span><span class="xml"></span><br><span class="xml">  &#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.使用ElementUI</title>
    <link href="/2021/10/30/%E4%BD%BF%E7%94%A8ElementUI/"/>
    <url>/2021/10/30/%E4%BD%BF%E7%94%A8ElementUI/</url>
    
    <content type="html"><![CDATA[<h1 id="使用ElementUI"><a href="#使用ElementUI" class="headerlink" title="使用ElementUI"></a>使用ElementUI</h1><p>首先使用npm安装ElemetsUI</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">npm install <span class="hljs-keyword">element</span>-plus <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后再使用Vue CLI创建的工程中，找到main.js，然后加入以下内容</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> ElementPlus <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-plus/dist/index.css&#x27;</span><br>app.use(ElementPlus)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>ElementUI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>学习</tag>
      
      <tag>ElementUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.Vue模版指令语法</title>
    <link href="/2021/10/30/3.Vue%E6%A8%A1%E7%89%88/"/>
    <url>/2021/10/30/3.Vue%E6%A8%A1%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue模版指令语法"><a href="#Vue模版指令语法" class="headerlink" title="Vue模版指令语法"></a>Vue模版指令语法</h1><h2 id="1-插值语法"><a href="#1-插值语法" class="headerlink" title="1.插值语法"></a>1.插值语法</h2><p>在第二篇文章中，创建了如下模版：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name1</span>&#125;&#125;</span><span class="xml">!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">     Hello </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name2</span>&#125;&#125;</span><span class="xml">!</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这种语法叫做插值语法，还有一种写法叫做指令语法：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name1</span>&#125;&#125;</span><span class="xml">!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&#x27;url&#x27;</span>&gt;</span>微软官网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">      <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">data</span>:&#123;</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-attr">name1</span>:<span class="hljs-string">&#x27;World&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;https://www.microsoft.com&#x27;</span></span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml">      &#125;);</span></span><br><span class="javascript"><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>相比于插值语法，指令语法多了v-bind:，指令带有前缀 v-，以表示它们是 Vue 提供的特殊 attribute，它们会在渲染的 DOM 上应用特殊的响应式行为。在这个例子中，本来href后面引号中虽然是字符串，但是加上v-bind中，url被当作js表达式执行，url被绑定（bind）到Vue实例中data的url，并把执行结果给href。<br><br><br>可以尝试一下一下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app-2&quot;</span>&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span></span><br><span class="xml">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="hljs-keyword">var</span> app2 = <span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app-2&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;页面加载于 &#x27;</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().toLocaleString()<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>v-bind可以给任何一个属性标签动态的去绑定。<br><strong>v-bind可以简写为’:’</strong><br>上文span中的代码可以简写为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    鼠标悬停几秒钟查看此处动态绑定的提示信息！<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.## 插值语法和指令语法用途<br>插值语法往往用于解析<strong>标签体内容</strong>，即起始标签和结束标签中的内容。写法，XXX是js表达式，并且可以直接读取Vue实例中data的属性。<br><br>指令语法用于解析<strong>标签</strong>（包括：标签属性、标签体内容、绑定事件）。Vue中有很多的指令，形式都是v-XXX，如v-if等，不同情况需要使用不同标签。<br>3.## 其他补充<br>将上一段代码修改一下：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="xml">!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Hello </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="xml">!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  //新增行</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&#x27;url&#x27;</span>&gt;</span>微软官网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">      <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">data</span>:&#123;</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;World&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;https://www.microsoft.com&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Vue&#x27;</span>  <span class="hljs-comment">//新增行</span></span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml">      &#125;);</span></span><br><span class="javascript"><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>如果想让h1显示Hello world而h2中显示Hello Vue，则必须进行修改，如果不修改，在Vue实例data对象中有两个重名的key，此时h1和h2都会显示Hello Vue，此时我们可以设计多层级数据结构：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 准备一个容器 --&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- root容器中代码叫Vue模版 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="xml">!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Hello </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">Web.name</span>&#125;&#125;</span><span class="xml">!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  //修改行</span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&#x27;url&#x27;</span>&gt;</span>微软官网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">      <span class="hljs-comment">//创建Vue实例，把参数传给配置对象，一个Vue实例对应一个容器</span></span></span><br><span class="javascript"><span class="xml">      <span class="hljs-keyword">new</span> Vue(&#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,  <span class="hljs-comment">//指定当前Vue容器,值通常为CSS选择器字符串</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-attr">data</span>:&#123;  <span class="hljs-comment">//data中用于存储数据，数据供el指定的容器使用</span></span></span><br><span class="javascript"><span class="xml">          <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;World&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;https://www.microsoft.com&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">          <span class="hljs-attr">Web</span>:&#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Vue&#x27;</span></span></span><br><span class="javascript"><span class="xml">          &#125;</span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml">      &#125;);</span></span><br><span class="javascript"><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注意修改行，如果不加Web. ，h2中的name只能获得data中的所有属性，即name、url、Web而不能获得Web中的name属性</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务器搭建指南</title>
    <link href="/2021/10/18/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/10/18/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="服务器搭建指南"><a href="#服务器搭建指南" class="headerlink" title="服务器搭建指南"></a>服务器搭建指南</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>早期的互联网技术不发达，前端需要做的只有把数据展示出来，而经过技术的发展，前端界面越来越复杂，提供的功能越来越多，前端技术栈也越来越丰富，解决问题也越来越复杂，所以前端技术无法再像之前一样零散的分布在系统框架中，前后端分离是一种历史必然。<br><br></p><p>所以，在前端技术中Vue是一种流行的方案，同时技术门槛没有React这么高，所以前端技术使用Vue技术，后端推荐使用SpringBoot技术。<br><br></p><p>除了Java，Golang依靠科技巨头Google也在逐渐流行，所以后端使用Go也是很好的选择。</p><h2 id="软件方面"><a href="#软件方面" class="headerlink" title="软件方面"></a>软件方面</h2><h3 id="服务器操作系统"><a href="#服务器操作系统" class="headerlink" title="服务器操作系统"></a>服务器操作系统</h3><p>目前市面上流行的服务器操作系统主要为Linux、Windows、Unix（IBM大型机），Linux和Windows有大量的开源第三方工具和软件以及相应的社区支持，Unix服务器也有大量IBM提供的工具。<br>为了降低成本和提高泛用性以及降低维护、开发门槛的目的，选用Linux内核是较好的方案。其中Linux发行版中，Debian更为稳定。</p><h3 id="1-Java服务器方案"><a href="#1-Java服务器方案" class="headerlink" title="1.Java服务器方案"></a>1.Java服务器方案</h3><h4 id="1-1基本需求"><a href="#1-1基本需求" class="headerlink" title="1.1基本需求"></a>1.1基本需求</h4><p>一个网页，至少需求Web服务器（软件）、HTTP服务器（软件）、应用服务器（软件），由于使用Java语言进行开发，服务器（物理意义）自然需要安装JDK。</p><h4 id="1-2Web服务器（软件）、HTTP服务器（软件）和应用服务器（软件）"><a href="#1-2Web服务器（软件）、HTTP服务器（软件）和应用服务器（软件）" class="headerlink" title="1.2Web服务器（软件）、HTTP服务器（软件）和应用服务器（软件）"></a>1.2Web服务器（软件）、HTTP服务器（软件）和应用服务器（软件）</h4><h5 id="1-2-1Web服务器"><a href="#1-2-1Web服务器" class="headerlink" title="1.2.1Web服务器"></a>1.2.1Web服务器</h5><p>在讨论Web服务器之前，要区分两个概念：静态资源和动态资源。<br><br></p><p>静态资源，即容纳静态资源的服务器，静态资源，顾名思义，即所见即所得，无论是哪一方得到的内容都是相同的。比如个人博客，绝大多数不涉及到用户登陆所以使用Hexo框架可以迅速的搭建起来。<br><br></p><p>动态资源，返回的都是的动态资源，典型的应用场景如登陆界面，如使用WordPress、Halo搭建的个人博客，这些资源需要单独的应用服务器承载，部署起来也更加复杂。<br><br></p><p>Web服务器用来提供Web化服务，属于<u><strong>静态服务器</strong></u>如网站页面服务、邮件服务和下载服务等，这些是典型的需要放在Web服务器上的静态资源，都属于Web化服务，</p><h5 id="1-2-2HTTP服务器"><a href="#1-2-2HTTP服务器" class="headerlink" title="1.2.2HTTP服务器"></a>1.2.2HTTP服务器</h5><p>当今的Web服务器应用层和通讯层为HTTP协议，所以基本上HTTP服务器就是和Web服务器对等。HTTP服务器可以把服务器上的资源通过HTTP协议传输给用户，注重于静态资源的传输支持。<br></p><h5 id="1-2-3应用服务器"><a href="#1-2-3应用服务器" class="headerlink" title="1.2.3应用服务器"></a>1.2.3应用服务器</h5><p>应用服务器即一个特定应用的承载容器，需要运行时环境的支持（如<strong>1.1基本需求</strong>中提到的JDK）。应用服务器属于<u><strong>动态服务器</strong></u>，支持动态响应，可以为不同的用户请求动态的生成资源并且返回，这样不同的用户得到的内容也不一样。在负载不大时，应用服务器也可以当作HTTP服务器应用（当然这么做的比较少）。</p><h4 id="1-3应用选择"><a href="#1-3应用选择" class="headerlink" title="1.3应用选择"></a>1.3应用选择</h4><p>如果需求较为简单，如自己写blog等，可以使用静态服务器，而如果想有后台管理等更复杂的功能，则需要使用动态服务器。<br><br></p><p><em><strong>1.HTTP服务器Nginx：</strong></em>Nginx是一个典型的HTTP服务器，她可以将服务端资源通过HTTP协议传输给用户端，同时也可以用来反向代理、负载均衡等用途，在实际应用中，通常用来把用户请求转发给后方的Tomcat服务器，由于Nginx的稳定性特别强，所以一般把她放在最前面去直面用户。<br><br></p><p><strong>2.应用服务器Tomcat：</strong>Apache的老牌Java服务器，集成Web服务器和应用服务器一体，必要时也可以当作HTTP服务器使用。</p><h3 id="2-Go服务器"><a href="#2-Go服务器" class="headerlink" title="2.Go服务器"></a>2.Go服务器</h3><p>由于Go编译后为二进制文件，所以编写完成后直接放到服务器上，或者使用Docker把项目部署到Docker，只需要把Go Web项目前放置Nginx即可。</p><h3 id="3-其他杂项"><a href="#3-其他杂项" class="headerlink" title="3.其他杂项"></a>3.其他杂项</h3><p>根据方案选择，安装相应的软件如mysql、JDK、Go运行环境、Docker等。</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/10/18/hello-world/"/>
    <url>/2021/10/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Hello World</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hello World</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
